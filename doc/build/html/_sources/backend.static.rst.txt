backend\.static package
=======================

.. todo:: Work in the link for the control panel.
.. todo:: Work in the link for the api endpoints.

Depending on the URL that we try to visit in the frontend we differentiate
between a number of different use-cases: We try to visit ...


#. ``http://HOST:PORT/``: a control panel will be displayed. This is further
   explained in LINK_TO_THIS.

#. ``http://HOST:PORT/api``: this is the api endpoint, which is further
   explained in LINK_TO_API.

#. ``http://HOST:PORT/scenes``: we will be presented with a dodecahedron behind
   an overlay message, telling us something along the lines of '`No scene
   selected\.`' There will also be no control menu and no colorbar.

#. ``http://HOST:PORT/scenes/INVALID_SCENE_HASH``: ``INVALID_SCENE_HASH`` can be
   any random string that has not been generated by the backend. We will again
   be presented with a dodecahedron, no control menu, no colorbar, but with
   an overlay saying something like '`Sorry, this scene does not exist\.`'

#. ``http://HOST:PORT/scenes/VALID_SCENE_HASH``: ``VALID_SCENE_HASH`` is a SHA1
   string that has been generated by the backend on creation of a scene. We will
   be presented with a display of the data that we want to visualize. We will
   also see a control menu and a colorbar. The SHA1 string is encoded into the
   ``index.html`` file.


This package is related to the points 3., 4., and 5. - based on the
scenes-related URL we visit, a different ``index.html`` file will be generated
that has the SHA1 contained in a tag in the HTML source if need be, or
directives to load the control menu or the colorbar.


Submodules
----------

backend\.static\.gen\_index module
----------------------------------

.. automodule:: backend.static.gen_index
    :members:
    :undoc-members:
    :show-inheritance:


Module contents
---------------

.. automodule:: backend.static
    :members:
    :undoc-members:
    :show-inheritance:
